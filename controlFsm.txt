Bit layout of control FSM output
================================

Single bit :
----------


 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 |
PCW |IRW |RAD |MST |MLD |RWE |AMX1|SEE |


PCW : Write enable for PC
IRW : Write enable for IR
RAD : activate tri-state to write register on data bus
MST : memory store enable
MLD : memory read enable (shall not be used with RAD)
RWE : Register bank write enable
AMX1: ALU muxer to select 1st operand : 0->PC, 1->REGS1
SEE : Sign-extent enable for imm-16 value (IMMLOW) entering AMX2

Dual bits :
-----------

10-11 |9-8 | 7-6 | 5-4 | 3-2 | 1-0 |
ALUMX |ADMX|PCMX |RWDMX|RWSMX|AMX2 |

ALUMX : ALU operation muxer : 0->opcode (IR), 1->0xd (ADD)
ADMX  : Address muxer : 0->PC, 1->ALU
PCMX  : PC muxer : 0->PC+1, 1->REGS1, 2->ALU
RWDMX : Register data write muxer : 0->MEMDATA, 1->ALU, 2->PC
RWSMX : Register selection write muxer : 0->RRDEST, 1->RIDEST, 2->0x1D (RA register 29)
AMX2  :	ALU muxer to select 2nd operand : 0->REGS2, 1->IMMLOW, 2->IMMHI, 3->IMM26


Control FSM input
=================
15  |14 - 10| . . . |2 - 0|
IMM |OPCODE |  RES  |STA  |

IMM : bit 31 of IR
OPCODE : bits 26-30 of IR
RES: reserved 
STA : status register from ALU :
	| 2 | 1 | 0 |
	|RES|G  |EQ |
	
	G : Greater than
	EQ : equal	


FSM
===
opcode type
|6 - 4|3 - 2|1 - 0|
|BR   |MEM  | ALU |

ALU : 0 is common, 1 register only, 2 immediate only, 3 is not ALU
MEM : 0 is lw, 1 is sw,3 is not MEM
BR : 0 is b<cond>, 1 is bi, 2 is b, 3 is calli, 7 invalid


State
| 6-3 | 2-0 |
| STA | SUB |

STA: state number
SUB substate

0 : Fetch
===========================
Actions
-------
	ADMX=0
	MLD =1
	IRW =1

ROM content and address
-----------------------

	0x48000000 -> ROM = 0x00

FSM transition
--------------
	NEXT = 1 (Decode)

1 : Decode
===========================
Actions
-------
	PCW=1
	PCMX=0
	AMX=1 (early evaluation of condition if instruction is branch)

ROM content and address:
-----------------------
	0x82000000 -> ROM = 0x08

FSM transition
--------------
	if (IS_ALU)
		NEXT = 2.x
	if (IS_MEM)
		NEXT = 3.x
	if (IS_BRANCH)
		if (BRANCH)
			NEXT = 5.x
		else
			NEXT = 0 (Fetch)

2.(0,1,4,5) : Execute ALU
============================
Actions
-------

	- (2.0, 2.4) Common ALU instruction (independent of IMM bit) :
		00000
		00001
		00010
		00101
		00110
		01000
		01001
		01101
		01110
		01111
		11001
		11010
		11011
		11100
		11101
		11111
		-----------------
		-> AMX2 = not(IMM)


	- (2.6) ALU if IMM=1 (not immediate)
		00011
		00111
		10001
		10010
		----------
		->AMX2 = 0


	- (2.1) ALU if IMM=0 (immediate), only HI
		11000
		11110
		----------
		->AMX2 = 2

	- All cases

		AMX1 = 1
		AMX2 = (see above)
		RWSMX = not (IMM)
		RWDMX = 1
		RWE = 1


ROM content and adress:
----------------------
	2.0 = 0x06000015 -> ROM=0x10
	2.1 = 0x06000016 -> ROM=0x12
	2.4 = 0x06000010 -> ROM=0x14
	2.5 = 0x06000010 -> ROM=0x16

FSM transition
--------------
	NEXT = 0 (fetch)


3.(0,1) : Execute memory 1
==========================
Actions :
---------
	- (3.0) lw : 001010
		
		AMX1 = 1
		AMX2 = 1
		ADMX = 1
		RWDMX = 0
		RWSMX = 1
		RWE = 1
		MLD = 1


	- (3.1) sw : 010110 
		
		AMX1 = 1
		AMX2 = 1
		ADMX = 1
		MST	 = 1
		RAD	 = 1

ROM content and address:
-----------------------
	3.0 = 0x0E000105 -> ROM=0x18
	3.1 = 0x32000101 -> ROM=0x19

FSM transition
--------------
	NEXT : 4	(Execute memory 2)


4.(0,1) : Execute memory 2
==========================
Actions
-------
	(nothing)
ROM content and address:
-----------------------
	4.0 = 0x00000000 -> ROM=0x20
	4.1 = 0x00000000 -> ROM=0x21

FSM transition
--------------
	NEXT : 0	(Fetch)


5.(0,1,2,3) : Branch
=====================
Actions
-------
	- (5.0) branch  to imm16 (be, bg, bne, bge, ...)
		PCW  = 1	
		AMX1 = 0
		ALUMX= 1
		PCMX = 2
		AMX2 = 1

	- (5.1) branch to register (b)
		PCW  = 1
		PCMX = 1

	- (5.2) branch to register + save PC (call)
		PCW = 1
		RWE = 1
		PCMX= 1
		RWDMX=2
		RWSMX=2

	- (5.3) branch to imm26 (bi)
		PCW  = 1
		AMX1 = 0
		ALUMX= 1
		PCMX = 2
		AMX2 = 3
	- (5.4) branch immediate + save PC (calli)
		PCW  = 1
		RWE  = 1
		AMX1 = 0
		ALUMX= 1
		PCMX = 2
		RWDMX= 2
		RWSMX= 2
		AMX2 = 3
ROM contents and address
------------------------
	5.0 : 0x80000481 -> ROM=0x28
	5.1 : 0x80000040 -> ROM=0x29
	5.2 : 0x84000068 -> ROM=0x2A
	5.3 : 0x80000483 -> ROM=0x2B
	5.4 : 0x840004AB -> ROM=0x2C

FSM transition
--------------
	NEXT : 0 (Fetch)
